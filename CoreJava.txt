//static members in java

Class Example{

	private int x;// Instance variable
	private static int y; //static member variable

	public void f1(){} //instance member function
	public static void f2(){} // static memeber function

	static  class Test // static inner class
	{
		public static String Country = "INDIA";
	}

}//class

Public class Hello{
	public static void main(String[] args)
	{
		Example e1=new Example();
		Example e1=new Example();
		
		Example.f2();
		System.out.println(Example.Test.country);
	}

}//class
//-------------------------------------------------------------------------
Wrapper class in java - 


public class Example{

	public static void main(String[] args)
	{
		Integer i1 = Integer.valueOf("11101",2)
		Double d1 = new Double("123.14");
		int a = Integer.parseInt("123");
		double b = Double.parseDouble(""13.45");
		
		int c = i1.intValue();
	}

}

//-------------------------------------------------------------------------

//packages in java:

package World;

public class HelloWord{
	public static void main(String[] args)
	{
	  System.out.println(""Hello World");
	}

}

javac HelloWorld.java
java HelloWorld

javac -d . HelloWorld.java // compile and create world directory which contains class file
java World.HelloWorld // run the program


//use of import in javac
--it is used to import classes of other packages

//-----------------------------------------------------------------------------------------------------

enum in java:

https://www.geeksforgeeks.org/enum-in-java/

//-----------------------------------------------------------------------------------------------------

Method overriding --  Early binding and Late Binding

class A{
    
    public void f1()
    {
        System.out.println("A: f1()");
    }
      
     
    public void f2()
    {
        System.out.println("A: f2()");
    }
    
}

public class B extends A {
    
    public void f1()
    {
        System.out.println("B: f1()");
    }
    
    public void f3()
    {
        System.out.println("B: f3()");
    }
    
    public static void main(String args[]) 
    {
        
        A a = new B();
        a.f1(); //B -- overriding LB
        a.f2(); //A -- EB
       // a.f3(); //error 
        
        
    }
}//class B

//-----------------------------------------------------------------------------------------------------------------------------------
//Java's java.util.Date

Method : getTime(), 
This Date instance contains the current time as its date and time.
Date date = new Date();

long time = date.getTime(); //getTime()

Comparing Dates
You can compare java.util.Date instance because the class implements the java.lang.Comparable interface. Here is how:

java.util.Date date1 = new java.util.Date();
java.util.Date date2 = new java.util.Date();

int comparison = date1.compareTo(date2); //+,0, -


java.util.Date date1 = new java.util.Date();
java.util.Date date2 = new java.util.Date();

boolean isBefore = date1.before(date2);
boolean isAfter  = date1.after (date2);

If you need to get or set the year, month, day of month etc. use a java.util.Calendar instead.

//-------------------------------------------------------------------------------------------------------------------------------------------
//Java's java.util.Calendar and GregorianCalendar

Calender is abstract class 
Methods : get(), set(), add(), subtract - add() with -negative parameter

//get()
Calendar calendar = new GregorianCalendar();

int year       = calendar.get(Calendar.YEAR);
int month      = calendar.get(Calendar.MONTH); 
int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH); // Jan = 0, not 1
int dayOfWeek  = calendar.get(Calendar.DAY_OF_WEEK);
int weekOfYear = calendar.get(Calendar.WEEK_OF_YEAR);
int weekOfMonth= calendar.get(Calendar.WEEK_OF_MONTH);

int hour       = calendar.get(Calendar.HOUR);        // 12 hour clock
int hourOfDay  = calendar.get(Calendar.HOUR_OF_DAY); // 24 hour clock
int minute     = calendar.get(Calendar.MINUTE);
int second     = calendar.get(Calendar.SECOND);
int millisecond= calendar.get(Calendar.MILLISECOND);


//set()
Calendar calendar = new GregorianCalendar();

calendar.set(Calendar.YEAR, 2009);
calendar.set(Calendar.MONTH, 11); // 11 = december
calendar.set(Calendar.DAY_OF_MONTH, 24); // christmas eve

//add()

Calendar calendar = new GregorianCalendar();

//set date to last day of 2009
calendar.set(Calendar.YEAR, 2009);
calendar.set(Calendar.MONTH, 11); // 11 = december
calendar.set(Calendar.DAY_OF_MONTH, 31); // new years eve

//add one day
calendar.add(Calendar.DAY_OF_MONTH, 1);

//date is now jan. 1st 2010
int year       = calendar.get(Calendar.YEAR);  // now 2010
int month      = calendar.get(Calendar.MONTH); // now 0 (Jan = 0)
int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH); // now 1

calendar.add(Calendar.DAY_OF_MONTH, -1);

//----------------------------------------------------------------------------------------------------------------

//use of Date class and Calender class

//date and calender class use
       
       Date statrtdate = new Date("2018/01/06 09:16:10");
      
       System.out.println("Start Date"+statrtdate);
       
       //set time in calender
        System.out.println("cal.setTime(statrtdate) set Calender object: ");
       Calendar cal = Calendar.getInstance();
       cal.setTime(statrtdate);
      
       cal.add(Calendar.HOUR, 4);
       
       System.out.println(cal.get(Calendar.YEAR));
    	System.out.println(cal.get(Calendar.MONTH));
    	System.out.println(cal.get(Calendar.DATE));
    	System.out.println(cal.get(Calendar.HOUR));
    	System.out.println(cal.get(Calendar.MINUTE));
    	System.out.println(cal.get(Calendar.SECOND));
        
        System.out.println("cal.getTime() returns date object: "+cal.getTime());
        System.out.println("************************************************************");
       
       Date enddate = new Date("2018/01/08 09:16:10");
       
       System.out.println("End Date"+enddate);
       
       Calendar cal1 = Calendar.getInstance();
       cal1.setTime(enddate);
      
       cal1.add(Calendar.HOUR, 1);
       
       System.out.println(cal1.get(Calendar.YEAR));
    	System.out.println(cal1.get(Calendar.MONTH));
    	System.out.println(cal1.get(Calendar.DATE));
    	System.out.println(cal1.get(Calendar.HOUR));
    	System.out.println(cal1.get(Calendar.MINUTE));
    	System.out.println(cal1.get(Calendar.SECOND));
        
        System.out.println("cal.getTime() returns date object: "+cal1.getTime());
//--------------------------------------------------------------------------------------------------------------------------------------------------------       